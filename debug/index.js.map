{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["interface Stringable {\n\ttoString(): string;\n}\n\nexport { Stringable };\n\nexport type EachIterator<T> = (value: T, key: number) => Stringable;\nexport type StringFunction = () => string;\n\n/**\n * Turns HTML-sensitive characters into HTML entities\n * Escapes all of &><\"'`\n */\nexport function escapeHTML(str: string) {\n\tif (typeof str !== \"string\" || str.length === 0) {\n\t\treturn \"\";\n\t}\n\n\treturn str.replace(/&/g, '&amp;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/\"/g, '&quot;')\n\t\t.replace(/'/g, '&#39;')\n\t\t.replace(/`/g, '&#96;');\n}\n\n/**\n * Turns double quotes into HTML entities in the given text.\n */\nexport function escapeQuotes(str: string) {\n\tif (typeof str !== \"string\" || str.length === 0) {\n\t\treturn \"\";\n\t}\n\n\treturn str.replace(/\"/g, \"&quot;\");\n}\n\n/**\n * An HTML snippet that's escaped by default.\n * Use $${\"data\"} to escape an input.\n */\nexport function $html(literalSections, ...substs) {\n\tconst raw = literalSections.raw;\n\tlet result = \"\";\n\n\tsubsts.forEach((subst, i) => {\n\t\tlet lit = raw[i];\n\n\t\tif (Array.isArray(subst)) {\n\t\t\tsubst = subst.join(\"\");\n\t\t}\n\n\t\tif (lit.endsWith(\"$\")) {\n\t\t\tif (subst == null) {\n\t\t\t\tsubst = \"null\";\n\t\t\t} else {\n\t\t\t\tsubst = escapeHTML(subst.toString());\n\t\t\t}\n\n\t\t\tlit = lit.slice(0, -1);\n\t\t}\n\n\t\tresult += lit;\n\t\tresult += subst;\n\t});\n\n\tresult += raw[raw.length - 1];\n\n\treturn result;\n}\n\n/**\n * Executes the given string or function a given number of times.\n */\nexport function $times(n: number, method: Function | string) {\n\tconst buffer = [];\n\n\tfor (let i = 0; i < n; i += 1) {\n\t\tif (typeof method === \"function\") {\n\t\t\tbuffer.push(method(i));\n\t\t} else {\n\t\t\tbuffer.push(method);\n\t\t}\n\t}\n\n\treturn buffer.join(\"\");\n}\n\nexport function $map(collection: any[], method: EachIterator<any> | string): string[];\nexport function $map<T extends {}>(collection: T[], method: EachIterator<T> | string): string[];\nexport function $map<T extends {}>(collection: T[], method: EachIterator<T> | string): string[] {\n\tlet buffer = [];\n\tlet len = collection.length;\n\n\tfor (let i = 0; i < len; i++) {\n\t\tif (typeof method === \"function\") {\n\t\t\tbuffer.push(method(collection[i], i).toString());\n\t\t} else {\n\t\t\tbuffer.push(method.toString());\n\t\t}\n\t}\n\n\treturn buffer;\n}\n\n/**\n * The Armature replacement for Circular's `each`\n * Automatically joins the given strings with nothing between them.\n * Use `$map` if you want an array.\n */\nexport function $each<T extends {}>(collection: T[], method: EachIterator<T> | string): string {\n\treturn $map<T>(collection, method).join(\"\");\n}\n\n/**\n * Calls the given function with the given object as a parameter.\n * Useful for aliasing a value to a shorter name in a template.\n */\nexport function $alias<T extends {}>(object: T, callback: (v: T) => string): string {\n\treturn callback(object);\n}\n\n/**\n * Executes the function or string only if the condition given is truthy.\n */\nexport function $if(condition: any, method: StringFunction | string, other?: StringFunction | string): string {\n\tif (condition) {\n\t\tif (typeof method === \"function\") {\n\t\t\treturn method();\n\t\t} else if (method) {\n\t\t\treturn method;\n\t\t}\n\t} else {\n\t\tif (typeof other === \"function\") {\n\t\t\treturn other();\n\t\t} else if (other) {\n\t\t\treturn other;\n\t\t}\n\t}\n\n\treturn \"\";\n}"],"sourceRoot":"/source/"}